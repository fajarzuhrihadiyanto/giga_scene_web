/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React from "react";
import { FrontSide } from "three";
import { useGLTF } from "@react-three/drei";
import { useThree } from "@react-three/fiber";
import gsap from "gsap";

import Room from "./Room";
import BookShelfArea from "./book shelf area/BookShelfArea";
import LoungeArea from "./lounge area/LoungeArea";
import LogoArea from "./logo area/LogoArea";
import WorkingArea from "./working area/WorkingArea";
import PictureArea from "./picture area/PictureArea";
import GamingArea from "./gaming area/GamingArea";

import useMainStore from "../store/useMainStore";
import { ControlsContext } from "../context/ControlsContext";
import { FOCUS_OMNIDIRECTIONAL_THREADMILL } from "../constants";
import { addVector3 } from "../utils";


export default function Lab(props) {
  // get the state and setter from the store
  const focusTarget = useMainStore.useFocusTarget()
  const cameraPosition = useMainStore.useCameraPosition()
  const controlsTargetOffset = useMainStore.useControlsTargetOffset()

  const controlsTarget = addVector3(cameraPosition, controlsTargetOffset)

  const { controls } = React.useContext(ControlsContext)

  const { camera } = useThree()

  // Load the model
  const { nodes, materials } = useGLTF(process.env.REACT_APP_MODEL_URL);
  Object.keys(materials).forEach(key => {
    // set the material side to FrontSide if it's not double sided (like the trophy cup)
    if(materials[key].userData.double_side !== 1) {
      materials[key].side = FrontSide
    }
  })

  React.useEffect(() => {
    if (controls.current) {
      if (focusTarget !== null) {
        // adjust camera rotation between orbital for omnidirectional threadmill and disabled for others
        if (focusTarget === FOCUS_OMNIDIRECTIONAL_THREADMILL) {
          controls.current.rotateSpeed = 1
        } else {
          controls.current.enableRotate = false
        }

        // animate camera to focus target
        gsap.to(controls.current.target, {duration: 1, ease: 'power4.inOut', x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
        gsap.to(camera.position, {duration: 1, ease: 'power4.inOut', x: cameraPosition[0], y: cameraPosition[1], z: cameraPosition[2]})
        
      } else {
        // enable rotate and set rotate speed back to default
        controls.current.enableRotate = true
        controls.current.rotateSpeed = -.5

        // animate camera to focus target
        gsap.to(controls.current.target, {duration: 1, ease: 'power4.inOut', x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
        gsap.to(camera.position, {duration: 1, ease: 'power4.inOut', x: cameraPosition[0], y: cameraPosition[1], z: cameraPosition[2]})
      }
    }

  }, [focusTarget, cameraPosition, controlsTarget])


  return (
    <group {...props} dispose={null}>
      <Room nodes={nodes} materials={materials} />
      <BookShelfArea nodes={nodes} materials={materials} />
      <LoungeArea nodes={nodes} materials={materials} />
      <LogoArea nodes={nodes} materials={materials} />
      <WorkingArea nodes={nodes} materials={materials} />
      <PictureArea nodes={nodes} materials={materials} />
      <GamingArea nodes={nodes} materials={materials} />
    </group>
  );
}

useGLTF.preload(process.env.REACT_APP_MODEL_URL);